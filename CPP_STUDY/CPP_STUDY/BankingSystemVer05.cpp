#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<cstring>
using namespace std;
const int NAME_LEN = 20;

void ShowMunu(void);
void MakeAccount(void);
void DepositMoney(void);
void WithdrawMoney(void);
void ShowAllAccInfo(void);

enum { MAKE = 1, DEPOSIT, WITHDRAW, INQUIRE, EXIT };

/*
  클래스 이름 : Account
  클래스 유형 : Entity 클래스
*/

class Account
{
private:
	int accID;
	int balance;
	char* cusName;
public:
	Account(int ID, int money, char* name);
	Account(const Account& ref); // ver03 복사생성자 추가 , 복사생성자에 cont 내용은 P218쪽


	int GetAccID() const;
	void Deposit(int money);
	int Withdraw(int money);
	void ShowAccInfo() const;
	~Account();

};

//Account* accArr[100]; // Account 저장을 위한 배열          04에 있던 것. 제거함
//int accNum = 0; // 저장된 Account 수

Account::Account(int ID, int money, char* name) // 가독성을 위해 클래스 내에 멤버함수만
	:accID(ID), balance(money)                  //  두고 정의는 클래스 외부로 뺌
{
	cusName = new char[strlen(name + 1)];
	strcpy(cusName, name);
}
Account::Account(const Account& ref)  
	:accID(ref.accID), balance(ref.balance)
{
	cusName = new char[strlen(ref.cusName + 1)];
	strcpy(cusName, ref.cusName);
}

int Account::GetAccID() const
{
	return accID;
} 

void Account::Deposit(int money)
{
	balance += money;
}

int Account::Withdraw(int money)
{
	if (balance < money)
		return 0;
	balance -= money;
	return money; // ??
}

void Account::ShowAccInfo() const // ver04 const 추가
{
	cout << "------------------" << endl;
	cout << "계좌ID : " << accID << endl;
	cout << "고객 이름 : " << cusName << endl;
	cout << "잔액 : " << balance << endl;
	cout << "------------------" << endl;
}

Account::~Account()
{
	delete[]cusName;
}

/*
  클래스 이름 : AccountHandler
  클래스 유형 : 컨트롤(Control) 클래스
*/

class AccountHandler 
{
private:
	Account* accArr[100];
	int accNum;
public:
	AccountHandler();
	void ShowMunu(void);
	void MakeAccount(void);
	void DepositMoney(void);
	void WithdrawMoney(void);
	void ShowAllAccInfo(void);
	~AccountHandler();
};


void AccountHandler::ShowMunu(void)
{
	system("cls");
	cout << "----------------" << endl;
	cout << "1. 계좌개설" << endl;
	cout << "2. 입 금" << endl;
	cout << "3. 출 금" << endl;
	cout << "4. 계좌정보 전체 출력" << endl;
	cout << "5. 프로그램 종료" << endl;
	cout << "----------------" << endl;
}

void AccountHandler::MakeAccount(void)
{
	int id;
	char name[NAME_LEN];
	int balance;
	cout << "[계좌개설]" << endl;
	cout << "계좌ID : "; cin >> id;
	cout << "고객 이름 : "; cin >> name;
	cout << "잔액 : "; cin >> balance;
	cout << endl;

	accArr[accNum++] = new Account(id, balance, name);

}

void AccountHandler::DepositMoney(void)
{
	int money;
	int id;
	cout << "[입 금]" << endl;
	cout << "계좌ID : "; cin >> id;
	cout << "입금액 : "; cin >> money;

	for (int i = 0; i < accNum; i++)
	{
		if (accArr[i]->GetAccID() == id)
		{
			accArr[i]->Deposit(money);
			cout << "입금완료" << endl;
			getchar(); getchar();
			return;
		}
		cout << "유효하지 않은 ID 입니다." << endl << endl;
		getchar(); getchar();
	}

}

void AccountHandler::WithdrawMoney(void)
{
	int money;
	int id;
	cout << "[출 금]" << endl;
	cout << "계좌ID : "; cin >> id;
	cout << "출금액 : "; cin >> money;
	for (int i = 0; i < accNum; i++)
	{
		if (accArr[i]->GetAccID() == id)
		{
			if (accArr[i]->Withdraw(money) == 0)
			{
				cout << "잔액 부족" << endl;
				getchar(); getchar();
				return;
			}
			cout << "출금 완료" << endl;
			getchar(); getchar();
			return;
		}
		cout << "유효하지 않은 ID 입니다." << endl << endl;
		getchar(); getchar();

	}
}

AccountHandler::AccountHandler() :accNum(0)
{

}

void AccountHandler::ShowAllAccInfo(void)
{
	for (int i = 0; i < accNum; i++)
	{
		accArr[i]->ShowAccInfo();
		cout << endl;
		getchar(); getchar();
	}
}

AccountHandler::~AccountHandler()
{
	for (int i = 0; i < accNum; i++)
	{
		delete accArr[i];
	}
}

//컨트롤 클래스 AccountHandler 중심으로 변경된 main 함수

int main(void)
{
	AccountHandler manager;
	int choice;

	while (1)
	{
		manager.ShowMunu();
		cout << "선택 : ";
		cin >> choice;
		cout << endl;

		switch (choice)
		{

		case MAKE:
			manager.MakeAccount();
			break;
		case DEPOSIT:
			manager.DepositMoney();
			break;
		case WITHDRAW:
			manager.WithdrawMoney();
			break;
		case INQUIRE:
			manager.ShowAllAccInfo();
			break;
		case EXIT:
			return 0;
		default:
			cout << "잘못 입력하셨습니다.." << endl;
			getchar(); getchar();
		}
	}
	return 0;
}